# Generated by Django 5.1.2 on 2024-10-30 19:44

import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("pghistory", "0006_delete_aggregateevent"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Board",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[("p", "papers"), ("c", "code"), ("j", "jobs")],
                        default=None,
                        max_length=1,
                        null=True,
                        unique=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Keyword",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("c", "cosmology"),
                            ("p", "earth and planets"),
                            ("g", "galaxies"),
                            ("h", "high energy"),
                            ("t", "tech and methods"),
                            ("s", "sun and stars"),
                            ("m", "multimessenger"),
                        ],
                        default=None,
                        max_length=2,
                        null=True,
                        unique=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField(max_length=10000)),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("edited", models.BooleanField(default=False)),
                ("nlikes", models.IntegerField(default=1)),
                (
                    "fans",
                    models.ManyToManyField(
                        editable=False,
                        related_name="liked_comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="app.comment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=120)),
                ("url", models.CharField(max_length=300)),
                ("date", models.DateTimeField()),
                ("edited", models.BooleanField(default=False)),
                ("nlikes", models.IntegerField(default=1)),
                ("score", models.FloatField(editable=False)),
                (
                    "board",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="posts",
                        to="app.board",
                    ),
                ),
                (
                    "fans",
                    models.ManyToManyField(
                        editable=False,
                        related_name="liked_posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "keywords",
                    models.ManyToManyField(
                        blank=True, related_name="posts", to="app.keyword"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CommentHistory",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.BigIntegerField()),
                ("content", models.TextField(max_length=10000)),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("edited", models.BooleanField(default=False)),
                ("nlikes", models.IntegerField(default=1)),
                (
                    "parent",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="app.comment",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="events",
                        to="app.comment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="app.post",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="comment",
            name="post",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="comments",
                to="app.post",
            ),
        ),
        migrations.CreateModel(
            name="PostHistory",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.BigIntegerField()),
                ("title", models.CharField(max_length=120)),
                ("url", models.CharField(max_length=300)),
                ("date", models.DateTimeField()),
                ("edited", models.BooleanField(default=False)),
                ("nlikes", models.IntegerField(default=1)),
                ("score", models.FloatField(editable=False)),
                (
                    "board",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="app.board",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="events",
                        to="app.post",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="post",
            trigger=pgtrigger.compiler.Trigger(
                name="title_changed_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."title" IS DISTINCT FROM (NEW."title"))',
                    func='INSERT INTO "app_posthistory" ("board_id", "date", "edited", "id", "nlikes", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "score", "title", "url", "user_id") VALUES (OLD."board_id", OLD."date", OLD."edited", OLD."id", OLD."nlikes", _pgh_attach_context(), NOW(), \'title_changed\', OLD."id", OLD."score", OLD."title", OLD."url", OLD."user_id"); RETURN NULL;',
                    hash="dafe5200e9da82969c199c2b6fc5236d3ce76c00",
                    operation="UPDATE",
                    pgid="pgtrigger_title_changed_update_34f81",
                    table="app_post",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="comment",
            trigger=pgtrigger.compiler.Trigger(
                name="content_changed_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."content" IS DISTINCT FROM (NEW."content"))',
                    func='INSERT INTO "app_commenthistory" ("content", "date", "edited", "id", "nlikes", "parent_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "user_id") VALUES (OLD."content", OLD."date", OLD."edited", OLD."id", OLD."nlikes", OLD."parent_id", _pgh_attach_context(), NOW(), \'content_changed\', OLD."id", OLD."post_id", OLD."user_id"); RETURN NULL;',
                    hash="a42cbfff6cb60a0b3d9d8e80e15bffead99e1143",
                    operation="UPDATE",
                    pgid="pgtrigger_content_changed_update_880c3",
                    table="app_comment",
                    when="AFTER",
                ),
            ),
        ),
    ]
